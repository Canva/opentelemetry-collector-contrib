// Code generated by mdatagen. DO NOT EDIT.

<<<<<<<< HEAD:receiver/huaweicloudcesreceiver/generated_component_test.go
package huaweicloudcesreceiver
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/generated_component_test.go
package gitproviderreceiver
========
package pprofreceiver
>>>>>>>> v0.137.0:receiver/pprofreceiver/generated_component_test.go

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/component/componenttest"
	"go.opentelemetry.io/collector/confmap/confmaptest"
	"go.opentelemetry.io/collector/receiver"
	"go.opentelemetry.io/collector/receiver/receivertest"
)

var typ = component.MustNewType("pprof")

func TestComponentFactoryType(t *testing.T) {
<<<<<<<< HEAD:receiver/huaweicloudcesreceiver/generated_component_test.go
	require.Equal(t, "huaweicloudcesreceiver", NewFactory().Type().String())
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/generated_component_test.go
	require.Equal(t, "gitprovider", NewFactory().Type().String())
========
	require.Equal(t, typ, NewFactory().Type())
>>>>>>>> v0.137.0:receiver/pprofreceiver/generated_component_test.go
}

func TestComponentConfigStruct(t *testing.T) {
	require.NoError(t, componenttest.CheckConfigStruct(NewFactory().CreateDefaultConfig()))
}

func TestComponentLifecycle(t *testing.T) {
	factory := NewFactory()

	tests := []struct {
		createFn func(ctx context.Context, set receiver.Settings, cfg component.Config) (component.Component, error)
		name     string
<<<<<<<< HEAD:receiver/huaweicloudcesreceiver/generated_component_test.go
		createFn func(ctx context.Context, set receiver.Settings, cfg component.Config) (component.Component, error)
	}{

		{
			name: "metrics",
			createFn: func(ctx context.Context, set receiver.Settings, cfg component.Config) (component.Component, error) {
				return factory.CreateMetrics(ctx, set, cfg, consumertest.NewNop())
			},
		},
	}
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/generated_component_test.go
		createFn func(ctx context.Context, set receiver.CreateSettings, cfg component.Config) (component.Component, error)
	}{

		{
			name: "metrics",
			createFn: func(ctx context.Context, set receiver.CreateSettings, cfg component.Config) (component.Component, error) {
				return factory.CreateMetricsReceiver(ctx, set, cfg, consumertest.NewNop())
			},
		},
	}
========
	}{}
>>>>>>>> v0.137.0:receiver/pprofreceiver/generated_component_test.go

	cm, err := confmaptest.LoadConf("metadata.yaml")
	require.NoError(t, err)
	cfg := factory.CreateDefaultConfig()
	sub, err := cm.Sub("tests::config")
	require.NoError(t, err)
	require.NoError(t, sub.Unmarshal(&cfg))

	for _, tt := range tests {
		t.Run(tt.name+"-shutdown", func(t *testing.T) {
<<<<<<<< HEAD:receiver/huaweicloudcesreceiver/generated_component_test.go
			c, err := tt.createFn(context.Background(), receivertest.NewNopSettings(), cfg)
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/generated_component_test.go
	for _, test := range tests {
		t.Run(test.name+"-shutdown", func(t *testing.T) {
			c, err := test.createFn(context.Background(), receivertest.NewNopCreateSettings(), cfg)
========
			c, err := tt.createFn(context.Background(), receivertest.NewNopSettings(typ), cfg)
>>>>>>>> v0.137.0:receiver/pprofreceiver/generated_component_test.go
			require.NoError(t, err)
			err = c.Shutdown(context.Background())
			require.NoError(t, err)
		})
		t.Run(tt.name+"-lifecycle", func(t *testing.T) {
<<<<<<<< HEAD:receiver/huaweicloudcesreceiver/generated_component_test.go
			firstRcvr, err := tt.createFn(context.Background(), receivertest.NewNopSettings(), cfg)
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/generated_component_test.go
		t.Run(test.name+"-lifecycle", func(t *testing.T) {
			firstRcvr, err := test.createFn(context.Background(), receivertest.NewNopCreateSettings(), cfg)
========
			firstRcvr, err := tt.createFn(context.Background(), receivertest.NewNopSettings(typ), cfg)
>>>>>>>> v0.137.0:receiver/pprofreceiver/generated_component_test.go
			require.NoError(t, err)
			host := newMdatagenNopHost()
			require.NoError(t, err)
			require.NoError(t, firstRcvr.Start(context.Background(), host))
			require.NoError(t, firstRcvr.Shutdown(context.Background()))
<<<<<<<< HEAD:receiver/huaweicloudcesreceiver/generated_component_test.go
			secondRcvr, err := tt.createFn(context.Background(), receivertest.NewNopSettings(), cfg)
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/generated_component_test.go
			secondRcvr, err := test.createFn(context.Background(), receivertest.NewNopCreateSettings(), cfg)
========
			secondRcvr, err := tt.createFn(context.Background(), receivertest.NewNopSettings(typ), cfg)
>>>>>>>> v0.137.0:receiver/pprofreceiver/generated_component_test.go
			require.NoError(t, err)
			require.NoError(t, secondRcvr.Start(context.Background(), host))
			require.NoError(t, secondRcvr.Shutdown(context.Background()))
		})
	}
}

var _ component.Host = (*mdatagenNopHost)(nil)

type mdatagenNopHost struct{}

func newMdatagenNopHost() component.Host {
	return &mdatagenNopHost{}
}

func (mnh *mdatagenNopHost) GetExtensions() map[component.ID]component.Component {
	return nil
}

func (mnh *mdatagenNopHost) GetFactory(_ component.Kind, _ component.Type) component.Factory {
	return nil
}
