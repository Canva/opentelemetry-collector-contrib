// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_config_test.go
					VcsChangeCount:          MetricConfig{Enabled: true},
					VcsChangeDuration:       MetricConfig{Enabled: true},
					VcsChangeTimeToApproval: MetricConfig{Enabled: true},
					VcsChangeTimeToMerge:    MetricConfig{Enabled: true},
					VcsContributorCount:     MetricConfig{Enabled: true},
					VcsRefCount:             MetricConfig{Enabled: true},
					VcsRefLinesDelta:        MetricConfig{Enabled: true},
					VcsRefRevisionsDelta:    MetricConfig{Enabled: true},
					VcsRefTime:              MetricConfig{Enabled: true},
					VcsRepositoryCount:      MetricConfig{Enabled: true},
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_config_test.go
					GitRepositoryBranchCount:               MetricConfig{Enabled: true},
					GitRepositoryContributorCount:          MetricConfig{Enabled: true},
					GitRepositoryCount:                     MetricConfig{Enabled: true},
					GitRepositoryPullRequestCount:          MetricConfig{Enabled: true},
					GitRepositoryPullRequestTimeOpen:       MetricConfig{Enabled: true},
					GitRepositoryPullRequestTimeToApproval: MetricConfig{Enabled: true},
					GitRepositoryPullRequestTimeToMerge:    MetricConfig{Enabled: true},
========
					NtpOffset: MetricConfig{Enabled: true},
>>>>>>>> v0.137.0:receiver/ntpreceiver/internal/metadata/generated_config_test.go
				},
				ResourceAttributes: ResourceAttributesConfig{
<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_config_test.go
					OrganizationName: ResourceAttributeConfig{Enabled: true},
					VcsVendorName:    ResourceAttributeConfig{Enabled: true},
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_config_test.go
					GitVendorName:    ResourceAttributeConfig{Enabled: true},
					OrganizationName: ResourceAttributeConfig{Enabled: true},
========
					NtpHost: ResourceAttributeConfig{Enabled: true},
>>>>>>>> v0.137.0:receiver/ntpreceiver/internal/metadata/generated_config_test.go
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_config_test.go
					VcsChangeCount:          MetricConfig{Enabled: false},
					VcsChangeDuration:       MetricConfig{Enabled: false},
					VcsChangeTimeToApproval: MetricConfig{Enabled: false},
					VcsChangeTimeToMerge:    MetricConfig{Enabled: false},
					VcsContributorCount:     MetricConfig{Enabled: false},
					VcsRefCount:             MetricConfig{Enabled: false},
					VcsRefLinesDelta:        MetricConfig{Enabled: false},
					VcsRefRevisionsDelta:    MetricConfig{Enabled: false},
					VcsRefTime:              MetricConfig{Enabled: false},
					VcsRepositoryCount:      MetricConfig{Enabled: false},
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_config_test.go
					GitRepositoryBranchCount:               MetricConfig{Enabled: false},
					GitRepositoryContributorCount:          MetricConfig{Enabled: false},
					GitRepositoryCount:                     MetricConfig{Enabled: false},
					GitRepositoryPullRequestCount:          MetricConfig{Enabled: false},
					GitRepositoryPullRequestTimeOpen:       MetricConfig{Enabled: false},
					GitRepositoryPullRequestTimeToApproval: MetricConfig{Enabled: false},
					GitRepositoryPullRequestTimeToMerge:    MetricConfig{Enabled: false},
========
					NtpOffset: MetricConfig{Enabled: false},
>>>>>>>> v0.137.0:receiver/ntpreceiver/internal/metadata/generated_config_test.go
				},
				ResourceAttributes: ResourceAttributesConfig{
<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_config_test.go
					OrganizationName: ResourceAttributeConfig{Enabled: false},
					VcsVendorName:    ResourceAttributeConfig{Enabled: false},
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_config_test.go
					GitVendorName:    ResourceAttributeConfig{Enabled: false},
					OrganizationName: ResourceAttributeConfig{Enabled: false},
========
					NtpHost: ResourceAttributeConfig{Enabled: false},
>>>>>>>> v0.137.0:receiver/ntpreceiver/internal/metadata/generated_config_test.go
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_config_test.go
				OrganizationName: ResourceAttributeConfig{Enabled: true},
				VcsVendorName:    ResourceAttributeConfig{Enabled: true},
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_config_test.go
				GitVendorName:    ResourceAttributeConfig{Enabled: true},
				OrganizationName: ResourceAttributeConfig{Enabled: true},
========
				NtpHost: ResourceAttributeConfig{Enabled: true},
>>>>>>>> v0.137.0:receiver/ntpreceiver/internal/metadata/generated_config_test.go
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_config_test.go
				OrganizationName: ResourceAttributeConfig{Enabled: false},
				VcsVendorName:    ResourceAttributeConfig{Enabled: false},
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_config_test.go
				GitVendorName:    ResourceAttributeConfig{Enabled: false},
				OrganizationName: ResourceAttributeConfig{Enabled: false},
========
				NtpHost: ResourceAttributeConfig{Enabled: false},
>>>>>>>> v0.137.0:receiver/ntpreceiver/internal/metadata/generated_config_test.go
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
