// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res    pcommon.Resource
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
	return &ResourceBuilder{
		config: rac,
		res:    pcommon.NewResource(),
	}
}

<<<<<<<< HEAD:receiver/githubreceiver/internal/metadata/generated_resource.go
// SetOrganizationName sets provided value as "organization.name" attribute.
func (rb *ResourceBuilder) SetOrganizationName(val string) {
	if rb.config.OrganizationName.Enabled {
		rb.res.Attributes().PutStr("organization.name", val)
|||||||| 6b1d3dd2c0c:receiver/gitproviderreceiver/internal/metadata/generated_resource.go
// SetGitVendorName sets provided value as "git.vendor.name" attribute.
func (rb *ResourceBuilder) SetGitVendorName(val string) {
	if rb.config.GitVendorName.Enabled {
		rb.res.Attributes().PutStr("git.vendor.name", val)
	}
}

// SetOrganizationName sets provided value as "organization.name" attribute.
func (rb *ResourceBuilder) SetOrganizationName(val string) {
	if rb.config.OrganizationName.Enabled {
		rb.res.Attributes().PutStr("organization.name", val)
========
// SetK8sClusterName sets provided value as "k8s.cluster.name" attribute.
func (rb *ResourceBuilder) SetK8sClusterName(val string) {
	if rb.config.K8sClusterName.Enabled {
		rb.res.Attributes().PutStr("k8s.cluster.name", val)
	}
}

// SetK8sClusterUID sets provided value as "k8s.cluster.uid" attribute.
func (rb *ResourceBuilder) SetK8sClusterUID(val string) {
	if rb.config.K8sClusterUID.Enabled {
		rb.res.Attributes().PutStr("k8s.cluster.uid", val)
>>>>>>>> v0.137.0:processor/resourcedetectionprocessor/internal/kubeadm/internal/metadata/generated_resource.go
	}
}

// SetVcsVendorName sets provided value as "vcs.vendor.name" attribute.
func (rb *ResourceBuilder) SetVcsVendorName(val string) {
	if rb.config.VcsVendorName.Enabled {
		rb.res.Attributes().PutStr("vcs.vendor.name", val)
	}
}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
