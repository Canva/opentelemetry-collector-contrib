// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/otel/metric"
	embeddedmetric "go.opentelemetry.io/otel/metric/embedded"
	noopmetric "go.opentelemetry.io/otel/metric/noop"
	"go.opentelemetry.io/otel/trace"
	embeddedtrace "go.opentelemetry.io/otel/trace/embedded"
	nooptrace "go.opentelemetry.io/otel/trace/noop"
<<<<<<<< HEAD:processor/logdedupprocessor/internal/metadata/generated_telemetry_test.go
|||||||| 6b1d3dd2c0c:receiver/otelarrowreceiver/internal/metadata/generated_telemetry_test.go

	"go.opentelemetry.io/collector/component"
========

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/component/componenttest"
>>>>>>>> v0.137.0:internal/otelarrow/internal/metadata/generated_telemetry_test.go
)

type mockMeter struct {
	noopmetric.Meter
	name string
}
type mockMeterProvider struct {
	embeddedmetric.MeterProvider
}

func (m mockMeterProvider) Meter(name string, opts ...metric.MeterOption) metric.Meter {
	return mockMeter{name: name}
}

type mockTracer struct {
	nooptrace.Tracer
	name string
}

type mockTracerProvider struct {
	embeddedtrace.TracerProvider
}

func (m mockTracerProvider) Tracer(name string, opts ...trace.TracerOption) trace.Tracer {
	return mockTracer{name: name}
}

func TestProviders(t *testing.T) {
	set := component.TelemetrySettings{
		MeterProvider:  mockMeterProvider{},
		TracerProvider: mockTracerProvider{},
	}

	meter := Meter(set)
	if m, ok := meter.(mockMeter); ok {
<<<<<<<< HEAD:processor/logdedupprocessor/internal/metadata/generated_telemetry_test.go
		require.Equal(t, "github.com/open-telemetry/opentelemetry-collector-contrib/processor/logdedupprocessor", m.name)
|||||||| 6b1d3dd2c0c:receiver/otelarrowreceiver/internal/metadata/generated_telemetry_test.go
		require.Equal(t, "otelcol/otelarrowreceiver", m.name)
========
		require.Equal(t, "github.com/open-telemetry/opentelemetry-collector-contrib/internal/otelarrow", m.name)
>>>>>>>> v0.137.0:internal/otelarrow/internal/metadata/generated_telemetry_test.go
	} else {
		require.Fail(t, "returned Meter not mockMeter")
	}

	tracer := Tracer(set)
	if m, ok := tracer.(mockTracer); ok {
<<<<<<<< HEAD:processor/logdedupprocessor/internal/metadata/generated_telemetry_test.go
		require.Equal(t, "github.com/open-telemetry/opentelemetry-collector-contrib/processor/logdedupprocessor", m.name)
|||||||| 6b1d3dd2c0c:receiver/otelarrowreceiver/internal/metadata/generated_telemetry_test.go
		require.Equal(t, "otelcol/otelarrowreceiver", m.name)
========
		require.Equal(t, "github.com/open-telemetry/opentelemetry-collector-contrib/internal/otelarrow", m.name)
>>>>>>>> v0.137.0:internal/otelarrow/internal/metadata/generated_telemetry_test.go
	} else {
		require.Fail(t, "returned Meter not mockTracer")
	}
}

func TestNewTelemetryBuilder(t *testing.T) {
	set := componenttest.NewNopTelemetrySettings()
	applied := false
	_, err := NewTelemetryBuilder(set, telemetryBuilderOptionFunc(func(b *TelemetryBuilder) {
		applied = true
	}))
	require.NoError(t, err)
	require.True(t, applied)
}
